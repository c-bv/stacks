name: CI

on:
  push:
    branches: ['main']

env:
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e

            REPO_DIR="/opt/${{ env.REPO_NAME }}"
            EXCLUDED_DIRS="${{ secrets.EXCLUDED_DIRS }}"

            cd $REPO_DIR
            git pull

            echo "${{ secrets.TRAEFIK_DOTENV }}" > $REPO_DIR/traefik/.env
            echo "${{ secrets.WHOAMI_DOTENV }}" > $REPO_DIR/whoami/.env
            echo "${{ secrets.MAILSERVER_DOTENV }}" > $REPO_DIR/mailserver/.env
            echo "${{ secrets.VAULTWARDEN_DOTENV }}" > $REPO_DIR/vaultwarden/.env
            echo "${{ secrets.DOCKGE_DOTENV }}" > $REPO_DIR/dockge/.env
            echo "${{ secrets.UPTIME_KUMA_DOTENV }}" > $REPO_DIR/uptime-kuma/.env
            echo "${{ secrets.WIREGUARD_DOTENV }}" > $REPO_DIR/wireguard/.env

            # Dynamically list directories in the repository to set DEPLOY_DIRS
            DEPLOY_DIRS=($(ls -d */ | sed 's#/##' | grep -Ev "^(${EXCLUDED_DIRS})$"))

            echo "Deployment directories: ${DEPLOY_DIRS[@]}"

            CHANGED_DIRS=$(git diff --name-only ${{ github.sha }} ${{ github.event.before }} | grep -Ev "^(.github|scripts|logs)/" | xargs -I {} dirname {} | sort -u)
            echo "Changed directories: $CHANGED_DIRS"

            for DIR in "${DEPLOY_DIRS[@]}"
            do
                if [ -d "$REPO_DIR/$DIR" ]; then
                    cd $REPO_DIR/$DIR

                    # Pull the latest images to check for updates
                    docker compose pull
                    UPDATED_IMAGES=$(docker compose images | awk '$2 != "IMAGE" && $3 != $4 {print $1}')

                    if [[ $CHANGED_DIRS == *"$DIR"* ]] || [[ -n "$UPDATED_IMAGES" && $UPDATED_IMAGES == *"$DIR"* ]]; then
                        echo "Deploying ${DIR} due to code changes or updated image..."
                        docker compose up -d --force-recreate
                    else
                        echo "No changes or new image for ${DIR}, skipping recreation."
                    fi

                    cd $REPO_DIR
                else
                    echo "Directory ${DIR} does not exist in the repository."
                fi
            done

            # Remove unused Docker images to free up space
            echo "Removing old Docker images..."
            docker image prune -f
